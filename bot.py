from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from storage import init_db, save_user, load_user, save_purchase  

SALARY, HOURS_MODE, CALCULATE = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = load_user(user_id)

    if data:
        salary, hours = data
        hourly_rate = salary / hours
        context.user_data["salary"] = salary
        context.user_data["hourly_rate"] = hourly_rate
        await update.message.reply_text(
            f"–Ø —Ç–µ–±—è –ø–æ–º–Ω—é! üß†\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary} —Ä—É–±, —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü: {hours}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞: {hourly_rate:.2f} —Ä—É–±\n\n"
            "–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏, –∏ —è —Å–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ."
        )
        return CALCULATE
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –≤ –º–µ—Å—è—Ü (–≤ —Ä—É–±–ª—è—Ö)?")
        return SALARY

async def salary_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        salary = float(update.message.text)
        context.user_data["salary"] = salary
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?\n"
            "–ù–∞–ø–∏—à–∏ `8` –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
        )
        return HOURS_MODE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑:")
        return SALARY

async def hours_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        hours_per_day = float(update.message.text)
        days_per_month = 22  # —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        total_hours = hours_per_day * days_per_month
        salary = context.user_data["salary"]
        hourly_rate = salary / total_hours
        context.user_data["hourly_rate"] = hourly_rate

        user_id = update.effective_user.id
        save_user(user_id, salary, total_hours)

        await update.message.reply_text(
            f"–¢–≤–æ—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞: {hourly_rate:.2f} —Ä—É–±.\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏, –∞ —è —Å–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –Ω–∞ –Ω–µ—ë –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return CALCULATE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return HOURS_MODE

async def calculate_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        hourly_rate = context.user_data.get("hourly_rate")

        if hourly_rate is None:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
            return SALARY

        hours_needed = amount / hourly_rate

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –ë–î
        user_id = update.effective_user.id
        save_purchase(user_id, amount, hours_needed)

        await update.message.reply_text(
            f"–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å {hours_needed:.2f} —á–∞—Å–æ–≤."
        )
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    return CALCULATE

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –°–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –≤ –º–µ—Å—è—Ü?")
    return SALARY

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    return ConversationHandler.END

if __name__ == "__main__":
    import os

    init_db()
    TOKEN = os.getenv("TG_BOT_TOKEN")  
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary_input)],
            HOURS_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, hours_input)],
            CALCULATE: [
                CommandHandler("reset", reset),
                MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_purchase),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
